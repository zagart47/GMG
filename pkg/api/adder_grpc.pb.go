// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: adder.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScoreAdderClient is the client API for ScoreAdder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoreAdderClient interface {
	AddScore(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
}

type scoreAdderClient struct {
	cc grpc.ClientConnInterface
}

func NewScoreAdderClient(cc grpc.ClientConnInterface) ScoreAdderClient {
	return &scoreAdderClient{cc}
}

func (c *scoreAdderClient) AddScore(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/api.ScoreAdder/AddScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoreAdderServer is the server API for ScoreAdder service.
// All implementations must embed UnimplementedScoreAdderServer
// for forward compatibility
type ScoreAdderServer interface {
	AddScore(context.Context, *AddRequest) (*AddResponse, error)
	mustEmbedUnimplementedScoreAdderServer()
}

// UnimplementedScoreAdderServer must be embedded to have forward compatible implementations.
type UnimplementedScoreAdderServer struct {
}

func (UnimplementedScoreAdderServer) AddScore(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScore not implemented")
}
func (UnimplementedScoreAdderServer) mustEmbedUnimplementedScoreAdderServer() {}

// UnsafeScoreAdderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoreAdderServer will
// result in compilation errors.
type UnsafeScoreAdderServer interface {
	mustEmbedUnimplementedScoreAdderServer()
}

func RegisterScoreAdderServer(s grpc.ServiceRegistrar, srv ScoreAdderServer) {
	s.RegisterService(&ScoreAdder_ServiceDesc, srv)
}

func _ScoreAdder_AddScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreAdderServer).AddScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScoreAdder/AddScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreAdderServer).AddScore(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScoreAdder_ServiceDesc is the grpc.ServiceDesc for ScoreAdder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoreAdder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ScoreAdder",
	HandlerType: (*ScoreAdderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddScore",
			Handler:    _ScoreAdder_AddScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adder.proto",
}
